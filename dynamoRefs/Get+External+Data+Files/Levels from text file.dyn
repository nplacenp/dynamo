{
  "Uuid": "df2991b6-d12e-47b3-b52f-161d3ffc3b4d",
  "IsCustomNode": false,
  "Description": null,
  "Name": "Levels from text file",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Level.ByElevationAndName@double,string",
      "Id": "2ceaa9bf3edb4acc87a1baf81fc7cf98",
      "Inputs": [
        {
          "Id": "1ef04c28cd0c47d3a84c0439f62b88cc",
          "Name": "elevation",
          "Description": "double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c365dab0305c4b19979d64baed35aeeb",
          "Name": "name",
          "Description": "string",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ffa74c508ff649f9908ba007ba87c183",
          "Name": "Level",
          "Description": "Level",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create a Revit Level given it's elevation and name in the project\n\nLevel.ByElevationAndName (elevation: double, name: string): Level"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.Filename, CoreNodeModels",
      "HintPath": "D:\\ARHITEKTURA\\##Revit Experiments\\#Video Course\\Get extermal data\\Floors\\Floors.txt",
      "InputValue": ".\\Floors.txt",
      "NodeType": "ExtensionNode",
      "Id": "8ee3c2c979d645269d24ce538153e9fd",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "8e60a1d8c8d048bf9abe95ad6b3d1c6d",
          "Name": "",
          "Description": "Filename",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows you to select a file on the system to get its filename"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.FileObject, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "be0b2d064e7749c18da6abde61356e84",
      "Inputs": [
        {
          "Id": "36d74e168354455ebf08149721a7b8b3",
          "Name": "path",
          "Description": "Path to the file.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "72d0c52baa6742aa965f2c39f383500c",
          "Name": "file",
          "Description": "File object",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a file object from a path."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.IO.FileSystem.ReadText@var",
      "Id": "5d50178f46064fdba07b162fad7ed567",
      "Inputs": [
        {
          "Id": "0544e97c12674da5878ececf0ad695fd",
          "Name": "file",
          "Description": "var",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "114f55364f3844fe9dd5fec1c089a08d",
          "Name": "str",
          "Description": "Contents of the text file.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Reads a text file and returns the contents as a string.\n\nFileSystem.ReadText (file: var): string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.String.Replace@string,string,string",
      "Id": "bc3fc9fddf5243d5908e82f1a18304ee",
      "Inputs": [
        {
          "Id": "81b2e3aee24f4efd8f1ea2f147aa8cff",
          "Name": "str",
          "Description": "String to replace substrings in.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a6a1d622684e466bb4982348bf2ae6eb",
          "Name": "searchFor",
          "Description": "Text to be replaced.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3f7631086dce412eb82efbdc3d284da7",
          "Name": "replaceWith",
          "Description": "Text to replace with.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "11e21ca252b44368b3114bcec3f6a28e",
          "Name": "str",
          "Description": "String with replacements made.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Replaces all occurrences of text in a string with other text.\n\nString.Replace (str: string, searchFor: string, replaceWith: string): string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Floor\";",
      "Id": "f686ce9e224149349d6f04708f9ea127",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "38cde2ff7fe94af5bf318b50c4a754dc",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Level\";",
      "Id": "634fd2f51e05419d83c1f02c90c77547",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "f1f267f69e1b4222a782f2229b16950b",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.String.Split@string,string[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "63b4a11b5fc34709a5b09205994839b9",
      "Inputs": [
        {
          "Id": "f209066d98a2471f8f0e8a3d3b15110f",
          "Name": "str",
          "Description": "String to split up.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 1,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c4392ef79a6d46cf943cc01849066cf6",
          "Name": "separator0",
          "Description": "Strings that, if present, determine the end and start of a split.\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f1746f737500436cbd0b8328e778c866",
          "Name": "separator1",
          "Description": "string[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0a7cb16653e14c3885429fd83aa92c2e",
          "Name": "strings",
          "Description": "List of strings made from the input string.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Divides a single string into a list of strings, with divisions determined by the given separator strings.\n\nString.Split (str: string, separators: string[]): string[]"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "\r\n",
      "Id": "f48a140e393c4178a3072934454aaa9a",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "ccca7aeb250f4c8cb124d17ef558b1a4",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a string."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "\t",
      "Id": "cf6e01e351e243ae958e4b9d53a947a0",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "48f3fc4e851d405da7f80567c2f8a89c",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a string."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.TakeEveryNthItem@var[]..[],int,int",
      "Id": "5a8ea36e5b284eeb8f62ee1c024a6d09",
      "Inputs": [
        {
          "Id": "a8d8fed5ecf441c29f488eddc7a26a3f",
          "Name": "list",
          "Description": "List to take items from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "63bd6a5a9d3a4899a4baa4f1cbcc1a0c",
          "Name": "n",
          "Description": "Indices that are multiples of this number (after the offset) will be fetched.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b6ec6f182e1d416bab5207f987cde256",
          "Name": "offset",
          "Description": "Amount of items to be ignored from the start of the list.\n\nint\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "94e857b1730a4a209588782dfe5e8bf8",
          "Name": "items",
          "Description": "Items from the list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Fetches items from the given list at indices that are multiples of the given value, after the given offset.\n\nList.TakeEveryNthItem (list: var[]..[], n: int, offset: int = 0): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "2;",
      "Id": "b1f50f374b3042d5881602ae658ba9d1",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "8ca631f217224b218df347384e305bae",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.TakeEveryNthItem@var[]..[],int,int",
      "Id": "9d6dfb259110430cadb43dfc90b13328",
      "Inputs": [
        {
          "Id": "f9dc2679929944c28881eb3beb826568",
          "Name": "list",
          "Description": "List to take items from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5ee61beb2668483f93e47d2923b30743",
          "Name": "n",
          "Description": "Indices that are multiples of this number (after the offset) will be fetched.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "94744141bf734166b797ee168c31de43",
          "Name": "offset",
          "Description": "Amount of items to be ignored from the start of the list.\n\nint\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9dddf31a10804c32b268165e01710736",
          "Name": "items",
          "Description": "Items from the list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Fetches items from the given list at indices that are multiples of the given value, after the given offset.\n\nList.TakeEveryNthItem (list: var[]..[], n: int, offset: int = 0): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "-1;",
      "Id": "37652bc9079349cda02c50e985f61fb6",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "af916b3041a347f1bc866cd7c2dcf346",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.String.Split@string,string[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "caf3715ae33c4343bb088ee86534e728",
      "Inputs": [
        {
          "Id": "c72a9059269f402897802a02c635776f",
          "Name": "str",
          "Description": "String to split up.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4ebc4100234a475bb56bdf3f5daf669a",
          "Name": "separator0",
          "Description": "Strings that, if present, determine the end and start of a split.\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c1084a32206a4b35814fd770fea8b3da",
          "Name": "strings",
          "Description": "List of strings made from the input string.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Divides a single string into a list of strings, with divisions determined by the given separator strings.\n\nString.Split (str: string, separators: string[]): string[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.String.Split@string,string[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "1e4da4ed6fed42ed91004bdedaf7886a",
      "Inputs": [
        {
          "Id": "346b59bf451b4ae5acee9eab3fcd2a6e",
          "Name": "str",
          "Description": "String to split up.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "bb8ed55838314f66849caeebe5201059",
          "Name": "separator0",
          "Description": "Strings that, if present, determine the end and start of a split.\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ec1f0076130743489a4404c66f1a15b4",
          "Name": "strings",
          "Description": "List of strings made from the input string.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Divides a single string into a list of strings, with divisions determined by the given separator strings.\n\nString.Split (str: string, separators: string[]): string[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Transpose@var[]..[]",
      "Id": "deea6d1e4b5d4f27a0ce2083833e6e22",
      "Inputs": [
        {
          "Id": "44565cf1b4d94e589c5362134a223464",
          "Name": "lists",
          "Description": "A list of lists to be transposed.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "db57d888a2e048109f69065f870ebf43",
          "Name": "lists",
          "Description": "A list of transposed lists.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Swaps rows and columns in a list of lists. If there are some rows that are shorter than others, null values are inserted as place holders in the resultant array such that it is always rectangular.\n\nList.Transpose (lists: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "a[0];\na[1];",
      "Id": "157b3df65a5b42b59d70646a90e64051",
      "Inputs": [
        {
          "Id": "dc2c1467edb14aceb57daced45f4b0d4",
          "Name": "a",
          "Description": "a",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6c7716554a7a417eb2df333f33d555c1",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "60bcfd1574f846dbaf62c0e2904fc20c",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.String.ToNumber@string",
      "Id": "bb67fc60b1184038b991853b27922d87",
      "Inputs": [
        {
          "Id": "5972145270ea4c79b02f97a4f73ace03",
          "Name": "str",
          "Description": "String to be converted.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "bce3a2ec9e9b46fd8fe16687d6bd46e9",
          "Name": "number",
          "Description": "Integer or double-type number.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Converts a string to an integer or a double.\n\nString.ToNumber (str: string): var[]..[]"
    }
  ],
  "Connectors": [
    {
      "Start": "8e60a1d8c8d048bf9abe95ad6b3d1c6d",
      "End": "36d74e168354455ebf08149721a7b8b3",
      "Id": "0b492775587c4fb1a6221fcbf53235a4"
    },
    {
      "Start": "72d0c52baa6742aa965f2c39f383500c",
      "End": "0544e97c12674da5878ececf0ad695fd",
      "Id": "ed3318f064894a69bca8140e234d0952"
    },
    {
      "Start": "114f55364f3844fe9dd5fec1c089a08d",
      "End": "81b2e3aee24f4efd8f1ea2f147aa8cff",
      "Id": "c6e7663e14d743eeb2ab72209842ac56"
    },
    {
      "Start": "11e21ca252b44368b3114bcec3f6a28e",
      "End": "f209066d98a2471f8f0e8a3d3b15110f",
      "Id": "b6bea53524bb4bd3adc2f51b786611d7"
    },
    {
      "Start": "11e21ca252b44368b3114bcec3f6a28e",
      "End": "c72a9059269f402897802a02c635776f",
      "Id": "0b62ea42056a4aa0a9a57e20a2607af8"
    },
    {
      "Start": "38cde2ff7fe94af5bf318b50c4a754dc",
      "End": "a6a1d622684e466bb4982348bf2ae6eb",
      "Id": "613b14dda4c24b7ab19d67075ff91622"
    },
    {
      "Start": "f1f267f69e1b4222a782f2229b16950b",
      "End": "3f7631086dce412eb82efbdc3d284da7",
      "Id": "e5b21d92f5a24765b4da64eea6b5fed9"
    },
    {
      "Start": "0a7cb16653e14c3885429fd83aa92c2e",
      "End": "a8d8fed5ecf441c29f488eddc7a26a3f",
      "Id": "7d4945e8d43044d78a7c7d5dc304730b"
    },
    {
      "Start": "0a7cb16653e14c3885429fd83aa92c2e",
      "End": "f9dc2679929944c28881eb3beb826568",
      "Id": "93e27ce59a934f6a9ce8dd831dec1835"
    },
    {
      "Start": "ccca7aeb250f4c8cb124d17ef558b1a4",
      "End": "c4392ef79a6d46cf943cc01849066cf6",
      "Id": "237d2e84dd0c416bb16fb60217c4c9c2"
    },
    {
      "Start": "ccca7aeb250f4c8cb124d17ef558b1a4",
      "End": "4ebc4100234a475bb56bdf3f5daf669a",
      "Id": "becf89b5a49646589352da52f9f23c68"
    },
    {
      "Start": "48f3fc4e851d405da7f80567c2f8a89c",
      "End": "f1746f737500436cbd0b8328e778c866",
      "Id": "185b968871ff4128b651b3f06a52d5f5"
    },
    {
      "Start": "48f3fc4e851d405da7f80567c2f8a89c",
      "End": "bb8ed55838314f66849caeebe5201059",
      "Id": "2a899b9afa90491d946f2a5a2fffbf89"
    },
    {
      "Start": "94e857b1730a4a209588782dfe5e8bf8",
      "End": "5972145270ea4c79b02f97a4f73ace03",
      "Id": "c89f17457e0249eaa18c86f1e288ad21"
    },
    {
      "Start": "8ca631f217224b218df347384e305bae",
      "End": "63bd6a5a9d3a4899a4baa4f1cbcc1a0c",
      "Id": "3fc4061e9e0f45349397ba99bd359152"
    },
    {
      "Start": "8ca631f217224b218df347384e305bae",
      "End": "5ee61beb2668483f93e47d2923b30743",
      "Id": "721a6e5a3f4c469ab6b2d088303e9282"
    },
    {
      "Start": "9dddf31a10804c32b268165e01710736",
      "End": "c365dab0305c4b19979d64baed35aeeb",
      "Id": "7e5c0871949b4bdabbc18c5a52202c07"
    },
    {
      "Start": "af916b3041a347f1bc866cd7c2dcf346",
      "End": "94744141bf734166b797ee168c31de43",
      "Id": "171d674c96104ec5a6d021c60ae3284a"
    },
    {
      "Start": "c1084a32206a4b35814fd770fea8b3da",
      "End": "346b59bf451b4ae5acee9eab3fcd2a6e",
      "Id": "92211fcd442a40c5943e0e85fd560769"
    },
    {
      "Start": "ec1f0076130743489a4404c66f1a15b4",
      "End": "44565cf1b4d94e589c5362134a223464",
      "Id": "ab0608f3b2fc4afc911501090e0d05bf"
    },
    {
      "Start": "db57d888a2e048109f69065f870ebf43",
      "End": "dc2c1467edb14aceb57daced45f4b0d4",
      "Id": "211aa0660e6d4655a4de4aeb6308e22a"
    },
    {
      "Start": "bce3a2ec9e9b46fd8fe16687d6bd46e9",
      "End": "1ef04c28cd0c47d3a84c0439f62b88cc",
      "Id": "2f24ca39a57e42a6b6925c0d2425e629"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "Bindings": [
    {
      "NodeId": "2ceaa9bf-3edb-4acc-87a1-baf81fc7cf98",
      "Binding": {
        "ByElevationAndName_InClassDecl-1_InFunctionScope-1_Instance0_2ceaa9bf-3edb-4acc-87a1-baf81fc7cf98": ""
      }
    }
  ],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.3.0.5885",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "NodeViews": [
      {
        "ShowGeometry": true,
        "Name": "Level.ByElevationAndName",
        "Id": "2ceaa9bf3edb4acc87a1baf81fc7cf98",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2004.834334424087,
        "Y": -359.497939090016
      },
      {
        "ShowGeometry": true,
        "Name": "File Path",
        "Id": "8ee3c2c979d645269d24ce538153e9fd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 209.96187413309647,
        "Y": -36.100887608454457
      },
      {
        "ShowGeometry": true,
        "Name": "File From Path",
        "Id": "be0b2d064e7749c18da6abde61356e84",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 333.59202516337143,
        "Y": -39.369003601399896
      },
      {
        "ShowGeometry": true,
        "Name": "FileSystem.ReadText",
        "Id": "5d50178f46064fdba07b162fad7ed567",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 499.4089888061709,
        "Y": -169.90954017450412
      },
      {
        "ShowGeometry": true,
        "Name": "String.Replace",
        "Id": "bc3fc9fddf5243d5908e82f1a18304ee",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 866.87833778415188,
        "Y": -169.17402213613155
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "f686ce9e224149349d6f04708f9ea127",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 692.17054921555609,
        "Y": 20.207628223315851
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "634fd2f51e05419d83c1f02c90c77547",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 675.36016898940193,
        "Y": 98.30614364099165
      },
      {
        "ShowGeometry": true,
        "Name": "String.Split",
        "Id": "63b4a11b5fc34709a5b09205994839b9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1190.2905941791828,
        "Y": -502.55304251691
      },
      {
        "ShowGeometry": true,
        "Name": "New Line symbol",
        "Id": "f48a140e393c4178a3072934454aaa9a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 916.00004267347242,
        "Y": -337.13442991053478
      },
      {
        "ShowGeometry": true,
        "Name": "Tab Symbol",
        "Id": "cf6e01e351e243ae958e4b9d53a947a0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 923.1235668710658,
        "Y": -443.06582531255805
      },
      {
        "ShowGeometry": true,
        "Name": "List.TakeEveryNthItem",
        "Id": "5a8ea36e5b284eeb8f62ee1c024a6d09",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1561.3377963389248,
        "Y": -675.26535866320251
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "b1f50f374b3042d5881602ae658ba9d1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1446.9136293363372,
        "Y": -449.25894317280887
      },
      {
        "ShowGeometry": true,
        "Name": "List.TakeEveryNthItem",
        "Id": "9d6dfb259110430cadb43dfc90b13328",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1561.4092038516844,
        "Y": -298.48230818707725
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "37652bc9079349cda02c50e985f61fb6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1455.9054365177392,
        "Y": -246.58885718821244
      },
      {
        "ShowGeometry": true,
        "Name": "String.Split",
        "Id": "caf3715ae33c4343bb088ee86534e728",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1174.1063020055467,
        "Y": 351.13715664865282
      },
      {
        "ShowGeometry": true,
        "Name": "String.Split",
        "Id": "1e4da4ed6fed42ed91004bdedaf7886a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1437.5759993123816,
        "Y": 360.32292932632248
      },
      {
        "ShowGeometry": true,
        "Name": "List.Transpose",
        "Id": "deea6d1e4b5d4f27a0ce2083833e6e22",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1687.1922463195422,
        "Y": 373.61006913342749
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "157b3df65a5b42b59d70646a90e64051",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1889.4706727995701,
        "Y": 358.38391904780781
      },
      {
        "ShowGeometry": true,
        "Name": "String.ToNumber",
        "Id": "bb67fc60b1184038b991853b27922d87",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1788.5981915452742,
        "Y": -673.029859186147
      }
    ],
    "Annotations": [
      {
        "Id": "2d08e859ae95460ab3e60720212a704a",
        "Title": "Approach 1",
        "Nodes": [
          "5a8ea36e5b284eeb8f62ee1c024a6d09",
          "b1f50f374b3042d5881602ae658ba9d1",
          "9d6dfb259110430cadb43dfc90b13328",
          "37652bc9079349cda02c50e985f61fb6"
        ],
        "Left": 1436.9136293363372,
        "Top": -728.46535866320255,
        "Width": 320.89557451534722,
        "Height": 574.47650147499007,
        "FontSize": 36.0,
        "InitialTop": -675.26535866320251,
        "InitialHeight": 390.24781555397726,
        "TextblockHeight": 43.2,
        "Background": "#FFC1D676"
      },
      {
        "Id": "46d9090506494f47a90dd8a77569b53e",
        "Title": "Approach 2",
        "Nodes": [
          "caf3715ae33c4343bb088ee86534e728",
          "1e4da4ed6fed42ed91004bdedaf7886a",
          "deea6d1e4b5d4f27a0ce2083833e6e22",
          "157b3df65a5b42b59d70646a90e64051"
        ],
        "Left": 1164.1063020055467,
        "Top": 297.93715664865283,
        "Width": 826.56437079402349,
        "Height": 168.27291248477465,
        "FontSize": 36.0,
        "InitialTop": 351.13715664865282,
        "InitialHeight": 145.07291248477466,
        "TextblockHeight": 43.2,
        "Background": "#FFC1D676"
      }
    ],
    "X": -890.14600005668763,
    "Y": 701.22044590495648,
    "Zoom": 0.82001692952892524
  }
}